diff -r a84cdc2617b3 -r e2b2b5d56e1a browser/app/nsBrowserApp.cpp
--- a/browser/app/nsBrowserApp.cpp	Thu Jan 23 19:39:49 2020 -0500
+++ b/browser/app/nsBrowserApp.cpp	Mon Mar 16 12:01:19 2020 -0400
@@ -164,6 +164,7 @@
       Output("Couldn't set %s.\n", appEnv);
       return 255;
     }
+    //
     argv[2] = argv[0];
     argv += 2;
     argc -= 2;
@@ -177,7 +178,6 @@
     shellData.sandboxBrokerServices =
         sandboxing::GetInitializedBrokerServices();
 #endif
-
     return gBootstrap->XRE_XPCShellMain(--argc, argv, envp, &shellData);
   }
 
@@ -186,10 +186,12 @@
   if (appDataFile && *appDataFile) {
     config.appData = nullptr;
     config.appDataPath = appDataFile;
+    
   } else {
     // no -app flag so we use the compiled-in app data
     config.appData = &sAppData;
     config.appDataPath = kDesktopFolder;
+    
   }
 
 #if defined(XP_WIN) && defined(MOZ_SANDBOX)
@@ -208,13 +210,14 @@
 #ifdef LIBFUZZER
   if (getenv("FUZZER"))
     gBootstrap->XRE_LibFuzzerSetDriver(fuzzer::FuzzerDriver);
-#endif
+#endif 
 
   // Note: keep in sync with LauncherProcessWin.
   const char* acceptableParams[] = {"url", nullptr};
   EnsureCommandlineSafe(argc, argv, acceptableParams);
 
   return gBootstrap->XRE_main(argc, argv, config);
+
 }
 
 static nsresult InitXPCOMGlue(LibLoadingStrategy aLibLoadingStrategy) {
@@ -246,7 +249,6 @@
 #endif
 
 int main(int argc, char* argv[], char* envp[]) {
-  printf("hello, Runchao Mao\n");
 	
 #if defined(MOZ_ENABLE_FORKSERVER)
   if (strcmp(argv[argc - 1], "forkserver") == 0) {
diff -r a84cdc2617b3 -r e2b2b5d56e1a browser/base/content/aboutNetError.js
--- a/browser/base/content/aboutNetError.js	Thu Jan 23 19:39:49 2020 -0500
+++ b/browser/base/content/aboutNetError.js	Mon Mar 16 12:01:19 2020 -0400
@@ -165,6 +165,7 @@
 
 function initPage() {
   var err = getErrorCode();
+  console.log(err);
   // List of error pages with an illustration.
   let illustratedErrors = [
     "malformedURI",
@@ -334,6 +335,39 @@
       span.textContent = document.location.hostname;
     }
   }
+  
+  var para = document.createElement('p');
+  var node = document.createTextNode('After backing to good network, see what happened:');
+  var link = document.createElement('a');
+
+  if (err == 'malformedURI'){
+    link.href = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Malformed_URI";
+  }else if(err == 'dnsNotFound'){
+    link.href = "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/404";
+  }else if(err == 'connectionFailure'){
+    link.href = "https://developer.mozilla.org/en-US/docs/Mozilla/Gecko/Chrome/API/Browser_API/mozbrowsererror";
+  }else if(err == 'netInterrupted'){
+    link.href = "https://help.paloalto.com/hc/en-us/articles/360000085711-What-does-the-Connection-interrupted-message-mean-";
+  }else if(err == 'netTimeout'){
+    link.href = "https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408";
+  }else if(err == 'netReset'){
+    link.href = "https://www.quora.com/What-does-the-104-Connection-reset-by-peer-error-notification-mean-and-how-do-I-fix-it";
+  }else if(err == 'netOffline'){
+    link.href = "https://developer.mozilla.org/en-US/docs/Web/API/NavigatorOnLine/Online_and_offline_events";
+  }else if(err == 'sslv3Used'){
+    link.href = "https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/SSL_functions/sslerr.html";
+  }else if(err == 'nssFailure2'){
+    link.href = "https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/SSL_functions/sslerr.html";
+  }else if(err == 'cspBlocked'){
+    link.href = 'https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP';
+  }else if(err == 'remoteXUL'){
+    link.href = 'https://help.blacknight.com/hc/en-us/articles/212519229-Webmail-Remote-XUL-error-in-FireFox-4-or-later';
+  }
+  link.appendChild(document.createTextNode(" here"));
+  para.appendChild(node);
+  para.appendChild(link);
+  para.append(document.createTextNode("."));
+  document.getElementById('errorShortDesc').appendChild(para);
 
   // Dispatch this event only for tests. This should only be sent after we're
   // done initializing the error page.
diff -r a84cdc2617b3 -r e2b2b5d56e1a devtools/client/shared/vendor/whatwg-url.js
--- a/devtools/client/shared/vendor/whatwg-url.js	Thu Jan 23 19:39:49 2020 -0500
+++ b/devtools/client/shared/vendor/whatwg-url.js	Mon Mar 16 12:01:19 2020 -0400
@@ -5213,6 +5213,7 @@
         curArg = "";
       }
       args.push(curArg);
+      console.log(args);
     }
     return iface.setup(Object.create(new.target.prototype), args);
   }
diff -r a84cdc2617b3 -r e2b2b5d56e1a hello.patch
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/hello.patch	Mon Mar 16 12:01:19 2020 -0400
@@ -0,0 +1,71 @@
+diff -r e9a3c8df0fc5 -r a84cdc2617b3 browser/app/no-pie/macversion.py
+--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
++++ b/browser/app/no-pie/macversion.py	Thu Jan 23 19:39:49 2020 -0500
+@@ -0,0 +1,44 @@
++#!/usr/bin/python
++# This Source Code Form is subject to the terms of the Mozilla Public
++# License, v. 2.0. If a copy of the MPL was not distributed with this
++# file, You can obtain one at http://mozilla.org/MPL/2.0/.
++
++from __future__ import absolute_import, print_function
++from optparse import OptionParser
++import sys
++import re
++
++o = OptionParser()
++o.add_option("--buildid", dest="buildid")
++o.add_option("--version", dest="version")
++
++(options, args) = o.parse_args()
++
++if not options.buildid:
++    print >>sys.stderr, "--buildid is required"
++    sys.exit(1)
++
++if not options.version:
++    print >>sys.stderr, "--version is required"
++    sys.exit(1)
++
++# We want to build a version number that matches the format allowed for
++# CFBundleVersion (nnnnn[.nn[.nn]]). We'll incorporate both the version
++# number as well as the date, so that it changes at least daily (for nightly
++# builds), but also so that newly-built older versions (e.g. beta build) aren't
++# considered "newer" than previously-built newer versions (e.g. a trunk nightly)
++
++define, MOZ_BUILDID, buildid = open(options.buildid, 'r').read().split()
++
++# extract only the major version (i.e. "14" from "14.0b1")
++majorVersion = re.match(r'^(\d+)[^\d].*', options.version).group(1)
++# last two digits of the year
++twodigityear = buildid[2:4]
++month = buildid[4:6]
++if month[0] == '0':
++    month = month[1]
++day = buildid[6:8]
++if day[0] == '0':
++    day = day[1]
++
++print('%s.%s.%s' % (majorVersion + twodigityear, month, day))
+diff -r e9a3c8df0fc5 -r a84cdc2617b3 browser/app/nsBrowserApp.cpp
+--- a/browser/app/nsBrowserApp.cpp	Sun Jan 19 02:25:25 2020 +0200
++++ b/browser/app/nsBrowserApp.cpp	Thu Jan 23 19:39:49 2020 -0500
+@@ -246,6 +246,8 @@
+ #endif
+ 
+ int main(int argc, char* argv[], char* envp[]) {
++  printf("hello, Runchao Mao\n");
++	
+ #if defined(MOZ_ENABLE_FORKSERVER)
+   if (strcmp(argv[argc - 1], "forkserver") == 0) {
+     nsresult rv = InitXPCOMGlue(LibLoadingStrategy::NoReadAhead);
+diff -r e9a3c8df0fc5 -r a84cdc2617b3 gfx/skia/skia/src/sksl/lex/Main.cpp
+--- a/gfx/skia/skia/src/sksl/lex/Main.cpp	Sun Jan 19 02:25:25 2020 +0200
++++ b/gfx/skia/skia/src/sksl/lex/Main.cpp	Thu Jan 23 19:39:49 2020 -0500
+@@ -207,6 +207,7 @@
+ }
+ 
+ int main(int argc, const char** argv) {
++    
+     if (argc != 6) {
+         printf("usage: sksllex <input.lex> <lexername> <tokenname> <output.h> <output.cpp>\n");
+         exit(1);
